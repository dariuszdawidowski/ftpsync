#!/usr/bin/python3
# -*- coding: utf-8 -*-
# FTPsync
# (c) Copyright 2013-2018 Dariusz Dawidowski
# (c) 2020 Python3 porting Mikolaj Machowski
# MIT License

import os, sys, pickle, re
from ftplib import FTP
from datetime import datetime
from io import BytesIO


if ("--help" in sys.argv) or (len(sys.argv) == 1):
    print("""ftpsync v2.0.0'
     Syncing current directory with remote ftp.

     Usage:
     ftpsync user:pass@ftp.address.url/remote/directory/

     Args:
       -c '...': run raw ftp command instead of sync
                 (use ; for multiple commands)
       --delete: delete non-existing files on server side
       --quiet:  hide messages except errors

     Ignored files:
       .ftpignore file in the source directory:
       # Comment
       file_name.ext
       directory_name
       name_with_*_wildcard

     Meta files:
       .ftpsync is automatically created in every ftp directory
           with metadata syncing info""")
    raise SystemExit

##
# Arguments

login, address = sys.argv[1].rsplit('@', 1)
user, password = login.split(':', 1)
server, remotedir = address.split('/', 1)
arg_command = bool('-c' in sys.argv)
arg_delete = bool('--delete' in sys.argv or '-d' in sys.argv)
arg_quiet = bool('--quiet' in sys.argv)

##
# List of ignored files

ignored = []


def get_ignored(filename):
    with open(os.path.join(os.getcwd(), filename)) as ig_file:
        for line in ig_file:
            if line.strip()[:1] != "#":
                ignored.append(line.strip())


def is_ignored(filename):
    for ignore in ignored:
        pattern = ignore.replace('*', '(.*)')
        compiled = re.compile(pattern)
        if compiled.search(filename):
            return True
    return False

##
# Ftp tree walker


def ftp_walker(localdir):
    # Remote directory
    remotecwd = '/' + remotedir.strip('/') + localdir[len(os.getcwd()):]
    ftp_log('-> ' + localdir + ' -> ' + user + "@" + server + remotecwd)
    ftp.cwd(remotecwd)
    # Timetable: .ftpsync file contains pickle with file dates
    changed = False
    timetable = {}
    try:
        # remotelistcache = ftp.nlst('.ftpsync')
        rio = BytesIO()
        ftp.retrbinary('RETR .ftpsync', rio.write)
        timetable = pickle.loads(rio.getvalue())
    except:
        changed = True
    # List directory
    locallist = os.listdir(localdir)
    remotelist = ftp.nlst()
    # Delete files on server side
    if arg_delete:
        for remotefile in remotelist:
            if ((remotefile not in locallist)
                    and (remotefile != '.ftpsync')
                    and (remotefile != '.')
                    and (remotefile != '..')):
                ftp_log('DELE ' + remotefile)
                ftp.delete(remotefile)
                changed = True
    # Files
    for fname in locallist:
        path = os.path.join(localdir, fname)
        if not is_ignored(fname) and os.path.isfile(path):
            rawtime = datetime.fromtimestamp(os.path.getmtime(path))
            localtime = rawtime.strftime('%Y%m%d%H%M%S')
            if (not timetable.get(fname)) or (timetable[fname] != localtime):
                ftp_log(fname)
                timetable[fname] = localtime
                with open(path, 'rb') as f:
                    ftp.storbinary('STOR ' + fname, f)
                changed = True
    # Save timetable
    if changed:
        wio = BytesIO(pickle.dumps(timetable))
        ftp.storbinary('STOR .ftpsync', wio)
    # Create directories
    for fname in os.listdir(localdir):
        if not is_ignored(fname):
            path = os.path.join(localdir, fname)
            if os.path.isdir(path) and not(fname in remotelist):
                ftp.mkd(fname)
    # Recursive directories
    for fname in os.listdir(localdir):
        if not is_ignored(fname):
            path = os.path.join(localdir, fname)
            if os.path.isdir(path):
                ftp_walker(path)


##
# Raw ftp command

def ftp_command(cmds):
    remotecwd = '/' + remotedir.strip('/')
    ftp_log('-> ' + user + "@" + server + remotecwd)
    ftp.cwd(remotecwd)
    for cmd in cmds:
        cmd = cmd.strip()
        ftp_log(cmd)
        if cmd[:4] == 'STOR':
            cmd_file = cmd.split(' ')
            ftp.storbinary(cmd, open(cmd_file[1].strip(), 'rb'))
        else:
            try:
                ftp.sendcmd(cmd)
            except:
                print('Error: cmd failed')


##
# Logging


def ftp_log(text):
    if not arg_quiet:
        print(text)


##
# Start


if os.path.isfile('.ftpignore'):
    get_ignored('.ftpignore')

try:
    ftp = FTP(server)
except Exception as e:
    raise SystemExit(e)

try:
    ftp.login(user, password)
except Exception as e:
    raise SystemExit(e)

if arg_command:
    ftp_command(sys.argv[3].strip('\'"').split(';'))
else:
    ftp_walker(os.getcwd())

ftp.quit()
